# Kubernetes Deployment for Wiz Todo App
# Implements deployment with environment variables and health probes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wiz-todo-app
  namespace: default
  labels:
    app: wiz-todo-app
    component: web-application
    version: v1.0.0
    purpose: wiz-exercise-demo
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: wiz-todo-app
  template:
    metadata:
      labels:
        app: wiz-todo-app
        component: web-application
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/info"
    spec:
      # INTENTIONAL VULNERABILITY: Use the service account with cluster-admin privileges
      serviceAccountName: wiz-todo-app-sa
      
      # Security context (some security, but still vulnerable due to RBAC)
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      containers:
      - name: wiz-todo-app
        image: wiz-todo-app:latest
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        
        # Environment variables for MongoDB connection (Requirement 2.3)
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: MONGODB_URI
          value: "mongodb://mongodb-vm-private-ip:27017/todoapp"
        - name: MONGODB_DATABASE
          value: "todoapp"
        - name: APP_NAME
          value: "wiz-todo-app"
        - name: LOG_LEVEL
          value: "info"
        
        # Resource limits
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Health probes (Requirement 2.9)
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # App needs to write logs
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for logs (optional)
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
      
      # Volumes
      volumes:
      - name: app-logs
        emptyDir: {}
      
      # Node selection (optional - for specific node requirements)
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations (optional)
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      # Pod disruption budget considerations
      # (Separate PDB resource will be created)
      
      # Restart policy
      restartPolicy: Always
      
      # DNS policy
      dnsPolicy: ClusterFirst
# Terraform CI/CD Pipeline for K8s Vulnerable Database Project
# Handles infrastructure provisioning and management

name: 🏗️ Terraform Infrastructure

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-west-2'
  TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  terraform-validate:
    name: 🔍 Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🎯 Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: ✅ Terraform Validate
        run: |
          cd terraform
          terraform init -backend=false
          terraform validate

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛡️ Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true

      - name: 📊 Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: 🔍 Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/
          soft_fail: true

  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan]
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Terraform Init
        run: |
          cd terraform
          terraform init

      - name: 📋 Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: 💬 Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
            const maxGitHubBodyCharacters = 65536;
            
            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }
            
            const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);
            
            for (let i = 0; i < planChunks.length; i++) {
              const output = `### 🏗️ Terraform Plan (Part ${i + 1}/${planChunks.length})
              
              \`\`\`terraform
              ${planChunks[i]}
              \`\`\`
              
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: 📤 Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event.inputs.action == 'apply'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Terraform Init
        run: |
          cd terraform
          terraform init

      - name: 🚀 Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: 📊 Output Infrastructure Info
        id: output
        run: |
          cd terraform
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "db_instance_ip=$(terraform output -raw db_instance_public_ip)" >> $GITHUB_OUTPUT

      - name: 💬 Comment with Infrastructure Info
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### 🎉 Infrastructure Deployed Successfully!
            
            **EKS Cluster:** \`${{ steps.output.outputs.cluster_name }}\`
            **Cluster Endpoint:** \`${{ steps.output.outputs.cluster_endpoint }}\`
            **Database IP:** \`${{ steps.output.outputs.db_instance_ip }}\`
            
            **Next Steps:**
            1. Update kubeconfig: \`aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.output.outputs.cluster_name }}\`
            2. Deploy applications: \`make k8s-deploy\`
            3. Setup vulnerable database: \`make setup-vulnerable-db\`
            
            *Deployed by: @${{ github.actor }} via ${{ github.workflow }}*`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });

  terraform-destroy:
    name: 💥 Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: 
      name: destruction
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Terraform Init
        run: |
          cd terraform
          terraform init

      - name: 💥 Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve

      - name: 💬 Comment Destruction Complete
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### 💥 Infrastructure Destroyed
            
            All AWS resources have been successfully destroyed.
            
            *Destroyed by: @${{ github.actor }} via manual trigger*`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });

  cost-estimation:
    name: 💰 Cost Estimation
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 💰 Infracost Setup
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 💰 Generate Infracost Diff
        run: |
          cd terraform
          infracost breakdown --path . --format json --out-file /tmp/infracost-base.json
          infracost diff --path . --compare-to /tmp/infracost-base.json --format json --out-file /tmp/infracost.json

      - name: 💬 Post Infracost Comment
        run: |
          infracost comment github --path /tmp/infracost.json \
            --repo $GITHUB_REPOSITORY \
            --github-token ${{ github.token }} \
            --pull-request ${{ github.event.pull_request.number }} \
            --behavior update
name: Kubernetes Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
  push:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'app/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wiz-exercise-dev-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üê≥ Building Docker image..."
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "üì§ Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Container Security Scan (SARIF)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Container Security Scan (Table)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Update kubeconfig
        run: |
          echo "üîß Configuring kubectl..."
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name wiz-exercise-dev
      
      - name: Update Kubernetes manifests
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          echo "üìù Updating Kubernetes manifests with new image..."
          
          # Update deployment with new image
          sed -i "s|image: .*|image: $IMAGE_URI|g" k8s/app/deployment.yaml
          
          # Update ingress with actual subnet IDs
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=*wiz-exercise*public*" --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
          sed -i "s|alb.ingress.kubernetes.io/subnets: .*|alb.ingress.kubernetes.io/subnets: $SUBNET_IDS|g" k8s/app/ingress.yaml
          
          echo "Updated subnets: $SUBNET_IDS"
      
      - name: Deploy to Kubernetes
        run: |
          echo "üöÄ Deploying to Kubernetes..."
          
          # Apply RBAC first (creates service account with cluster-admin)
          kubectl apply -f k8s/app/rbac.yaml
          
          # Apply service
          kubectl apply -f k8s/app/service.yaml
          
          # Apply deployment
          kubectl apply -f k8s/app/deployment.yaml
          
          # Apply ingress
          kubectl apply -f k8s/app/ingress.yaml
          
          echo "‚úÖ Deployment complete!"
      
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          kubectl rollout status deployment/wiz-todo-app --timeout=300s
          
          echo "üìä Deployment status:"
          kubectl get pods -l app=wiz-todo-app
          kubectl get services -l app=wiz-todo-app
          kubectl get ingress
      
      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Check if pods are running
          READY_PODS=$(kubectl get pods -l app=wiz-todo-app --field-selector=status.phase=Running --no-headers | wc -l)
          echo "Ready pods: $READY_PODS"
          
          if [ "$READY_PODS" -gt 0 ]; then
            echo "‚úÖ Deployment verification successful!"
            
            # Test the application
            POD_NAME=$(kubectl get pods -l app=wiz-todo-app --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
            echo "Testing wizexercise.txt file..."
            kubectl exec $POD_NAME -- cat /app/wizexercise.txt
            
            # Test health endpoint
            kubectl exec $POD_NAME -- wget -qO- http://localhost:3000/health || echo "Health check not available"
          else
            echo "‚ùå Deployment verification failed!"
            kubectl describe pods -l app=wiz-todo-app
            exit 1
          fi
      
      - name: Security validation
        run: |
          echo "üîí Validating security configurations..."
          
          # Check RBAC over-privilege (should show cluster-admin access)
          echo "Checking service account permissions:"
          kubectl auth can-i --list --as=system:serviceaccount:default:wiz-todo-app-sa | head -10
          
          # Check if ALB is being created
          echo "Checking ingress status:"
          kubectl get ingress -o wide
          
          echo "üéØ Security validation complete - vulnerabilities ready for Wiz demo!"